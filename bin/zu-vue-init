#!/usr/bin/env node

const fs = require("fs-extra")
const path = require("path")
const program = require('commander')
const chalk = require('chalk')
const ora = require('ora')
const download = require('download-git-repo')
const tplObj = require(`${__dirname}/../template`)
const { isDirectory, isFile, nonEmptyDir } = require("../utils")

const OFFICIAL_DIR = process.cwd();

program
  .usage('<template-name> [project-name]')
program.parse(process.argv)
// 当没有输入参数的时候给个提示
if (program.args.length < 1) return program.help()

// 好比 vue init webpack project-name 的命令一样，第一个参数是 webpack，第二个参数是 project-name
let templateName = program.args[0]
let projectName = program.args[1]
// 小小校验一下参数
if (!tplObj[templateName]) {
  console.log(chalk.red('\n Template does not exit! \n '))
  return
}
if (!projectName) {
  console.log(chalk.red('\n Project should not be empty! \n '))
  return
}

let _url, url, isClone = false
_url = tplObj[templateName]
if (~tplObj[templateName].indexOf("://")) {
  url = "direct:" + _url
  isClone = true
} else url = _url

/**
 * 下载资源 生成代码
 * @param {Function} success 收尾操作 擦除tempProj目录
 */
const generateCode = (dirname, success) => {
  console.log(chalk.white('\n Start generating... \n'))
  // 出现加载图标
  const spinner = ora("Downloading... \n");
  spinner.start();
  // 执行下载方法并传入参数
  download(
    url,
    dirname, {
      clone: isClone
    },
    err => {
      if (err) {
        spinner.fail();
        console.log(chalk.red(`Generation failed. ${err}`))
        return
      }
      // 结束加载图标
      spinner.succeed();
      console.log(chalk.green('\n Generation completed!'))
      // 转移文件到上级目录
      success && success();
      console.log('\n To get started')
      console.log(`\n    cd ${projectName} \n`)
    }
  )
}

const mvCode = (tempDirName) => {
  const PROJ_BASE = process.cwd();
  const TEMP_BASE = path.join(PROJ_BASE, tempDirName)

  try {
    recursiveMoveFlow(PROJ_BASE, TEMP_BASE, path.resolve(TEMP_BASE, "./"))
    
    fs.removeSync(TEMP_BASE)
    
    console.log(chalk.green("\n Destroy empty directory completed!"))
  } catch (error) {
    console.error("MvCode Error: %s", error.message)
  }
}

const recursiveMoveFlow = (proj, temp, sourceDir) => {
  const sourcePathArr = fs.readdirSync(sourceDir).map((item) => path.join(sourceDir, item))

  if (sourcePathArr.length > 0) {
    sourcePathArr.forEach((filePath, i) => {
      if (isDirectory(filePath) && nonEmptyDir(filePath)) {
        recursiveMoveFlow(proj, temp, filePath)
      } else {
        const destPath = filePath.replace(temp, proj)
        // console.log("%s\n%s", filePath, destPath)
        // console.log("--------------------------------------------------------------------------------")

        const { dirLike, err } = getDirFromFilePath(filePath)
        if (!err) {
          fs.mkdirSync(dirLike.replace(temp, proj), { recursive: true })
        
          // const readStream = fs.createReadStream(filePath, { encoding: "utf8" });
          // const writeStream = fs.createWriteStream(destPath);
          // const ws = readStream.pipe(writeStream);
          if(fs.existsSync(filePath)) fs.moveSync(filePath, destPath, { overwrite: true })
        }
      }
    })
  }
}

const getDirFromFilePath = (filePath) => isDirectory(filePath) ? { dirLike: filePath, err: false } : isFile(filePath) ? { dirLike: path.resolve(filePath, "../"), err: false } : { dirLike: null, err: true }

// 判断项目文件夹是否存在
// 不存在，则默认操作
// 存在，则判断是否为空
// 为空，则默认操作
// 不为空，则新建tempProj文件夹
// 并默认操作到tempProj文件夹
// 
// 完成后将tempProj文件夹下的所有内容移动到上级目录
// 完成后将tempProj文件夹删除
const projDir = path.join(OFFICIAL_DIR, projectName)
if (isDirectory(projDir) && nonEmptyDir(projDir)) {
  process.chdir(projDir)
  // 新建tempProj文件夹
  const tempDirName = projectName;
  fs.mkdir(`./${tempDirName}/`, function (err) {
    if (err) return console.error(`Mkdir Error: ${err.message}`);
    generateCode(tempDirName, function () {
      mvCode(tempDirName)
    });
  })
} else {
  generateCode(projectName);
}
